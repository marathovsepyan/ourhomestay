{"version":3,"sources":["meteor://ðŸ’»app/packages/mdg:validated-method/validated-method.js"],"names":[],"mappings":"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","file":"/packages/mdg_validated-method.js","sourcesContent":["/* global ValidatedMethod:true */\n\nValidatedMethod = class ValidatedMethod {\n  constructor(options) {\n    // Default to no mixins\n    options.mixins = options.mixins || [];\n    check(options.mixins, [Function]);\n    check(options.name, String);\n    options = applyMixins(options, options.mixins);\n\n    // connection argument defaults to Meteor, which is where Methods are defined on client and\n    // server\n    options.connection = options.connection || Meteor;\n\n    // Allow validate: null shorthand for methods that take no arguments\n    if (options.validate === null) {\n      options.validate = function () {};\n    }\n\n    // If this is null/undefined, make it an empty object\n    options.applyOptions = options.applyOptions || {};\n\n    check(options, Match.ObjectIncluding({\n      name: String,\n      validate: Function,\n      run: Function,\n      mixins: [Function],\n      connection: Object,\n      applyOptions: Object,\n    }));\n\n    // Default options passed to Meteor.apply, can be overridden with applyOptions\n    const defaultApplyOptions = {\n      // Make it possible to get the ID of an inserted item\n      returnStubValue: true,\n\n      // Don't call the server method if the client stub throws an error, so that we don't end\n      // up doing validations twice\n      throwStubExceptions: true,\n    };\n\n    options.applyOptions = _.extend({}, defaultApplyOptions, options.applyOptions);\n\n    // Attach all options to the ValidatedMethod instance\n    _.extend(this, options);\n\n    const method = this;\n    this.connection.methods({\n      [options.name](args) {\n        // Silence audit-argument-checks since arguments are always checked when using this package\n        check(args, Match.Any);\n        const methodInvocation = this;\n\n        return method._execute(methodInvocation, args);\n      }\n    });\n  }\n\n  call(args, callback) {\n    // Accept calling with just a callback\n    if (_.isFunction(args)) {\n      callback = args;\n      args = {};\n    }\n\n    try {\n      return this.connection.apply(this.name, [args], this.applyOptions, callback);\n    } catch (err) {\n      if (callback) {\n        // Get errors from the stub in the same way as from the server-side method\n        callback(err);\n      } else {\n        // No callback passed, throw instead of silently failing; this is what\n        // \"normal\" Methods do if you don't pass a callback.\n        throw err;\n      }\n    }\n  }\n\n  _execute(methodInvocation, args) {\n    methodInvocation = methodInvocation || {};\n\n    // Add `this.name` to reference the Method name\n    methodInvocation.name = this.name;\n\n    const validateResult = this.validate.bind(methodInvocation)(args);\n\n    if (typeof validateResult !== 'undefined') {\n      throw new Error(`Returning from validate doesn't do anything; \\\nperhaps you meant to throw an error?`);\n    }\n\n    return this.run.bind(methodInvocation)(args);\n  }\n};\n\n// Mixins get a chance to transform the arguments before they are passed to the actual Method\nfunction applyMixins(args, mixins) {\n  // You can pass nested arrays so that people can ship mixin packs\n  const flatMixins = _.flatten(mixins);\n  // Save name of the method here, so we can attach it to potential error messages\n  const {name} = args;\n\n  flatMixins.forEach((mixin) => {\n    args = mixin(args);\n\n    if(!Match.test(args, Object)) {\n      const functionName = mixin.toString().match(/function\\s(\\w+)/);\n      let msg = 'One of the mixins';\n\n      if(functionName) {\n        msg = `The function '${functionName[1]}'`;\n      }\n\n      throw new Error(`Error in ${name} method: ${msg} didn't return the options object.`);\n    }\n  });\n\n  return args;\n}\n"]}